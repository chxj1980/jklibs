###
## Change it only when you add new file to compile
## other config please see config/...
## config.mk is generated by Makefile, so don't change it.

SHELL=/bin/bash

BASEDIR=$(shell pwd)

ECHO="echo -e"

include include.mk
sinclude config/config_all.mk

file-dirs += common
OBJS += common/$(OBJDIR)/build-in.o

ifeq ("$(DEMO)", "y")
	file-dirs += demo
endif

ifeq ("$(VDEV)", "y")
	file-dirs += vdev
	OBJS += vdev/$(OBJDIR)/build-in.o
endif

ifeq ("$(CODEC)", "y")
	file-dirs += codec
	OBJS += codec/$(OBJDIR)/build-in.o
endif

ifeq ("$(QRCODE)", "y")
	file-dirs += qrcodec
	OBJS += qrcode/$(OBJDIR)/build-in.o
endif

ifeq ("$(RECORDSERVER)", "y")
	file-dirs += recordserver
	OBJS += recordserver/$(OBJDIR)/build-in.o
endif

ifeq (x$(JKPROTOCOL), xy)
	file-dirs += jkprotocol
	OBJS += jkprotocol/$(OBJDIR)/build-in.o
endif

ifeq (x$(OPENAV), xy)
	file-dirs += openav
	OBJS += openav/$(OBJDIR)/build-in.o
endif

ifeq (x$(PROTOCOL), xy)
	file-dirs += protocol
	OBJS += protocol/$(OBJDIR)/build-in.o
endif

all: generate_config dirs static dyn

dirs:
	@$(ECHO) "All to Build: $(file-dirs)"
	@for i in $(file-dirs); \
		do \
		$(ECHO) "\n==========================="; \
		$(ECHO) "\tBuild $$i "; \
		$(ECHO) "===========================\n"; \
		cd $$i; \
		make ; \
		cd .. ; \
		done

generate_config:
	@$(ECHO) "==== Generate Version ===="
	@ [ -f $(CONFIG_FILE) ] && rm -rf $(CONFIG_FILE); \
		DATA=`date +%Y%m%d%H%M%S`; \
		GITVERSION=`./tools/setlocalversion`; \
		BUILD_GIT_VERSION=$$DATA.git-$$GITVERSION; \
		echo "# generated git version" >> $(CONFIG_FILE); \
		echo "#define BUILD_GIT_VERSION $$BUILD_GIT_VERSION" >> $(CONFIG_FILE)

static:
	@$(ECHO) " \n\t Generate \t $(STATIC_JKLIB)"
	$(Q) $(AR) -r -o $(LIBDIR_PATH)/$(STATIC_JKLIB) $(OBJS) $(CPPOBJS)
	$(Q) ln -sf $(LIBDIR_PATH)/$(STATIC_JKLIB) $(LIBDIR_PATH)/$(LINKSTATICJK)

dyn:
	@$(ECHO) " \n\t Generate \t $(DYNJKLIB)"
	$(Q) $(CC) -fPIC -shared -o $(LIBDIR_PATH)/$(DYNJKLIB) $(OBJS)
	$(Q) ln -sf $(LIBDIR_PATH)/$(DYNJKLIB) $(LIBDIR_PATH)/$(LINKJK)

createdir:
	@if [ ! -f config.mk ]; then   \
		$(ECHO) "    No platform, please exec: "; \
		$(ECHO) "    make x86/hi3515/dm365/hi3535";  \
		exit 1; \
	fi

install:
	@$(ECHO) "\t cp $(INSTALL_HEADERS) $(INSTALL_DIRS)/include/"
	$(Q) cp -vrf $(INSTALL_HEADERS) $(INSTALL_DIRS)/include/
	$(Q) cp -rvf $(INSTALL_LIBS) $(INSTALL_DIRS)/lib/

clean:
	@for i in $(file-dirs); \
		do \
		$(ECHO) "\nClean $$i \n"; \
		cd $$i; \
		make clean; \
		cd .. ; \
		done
	rm outlib/$(OS)/lib/* -rf

distclean: clean
	@for i in $(file-dirs); \
		do \
		$(ECHO) "\ndistclean $$i \n"; \
		cd $$i; \
		make distclean; \
		cd .. ; \
		done
	$(Q)rm -rf $(OBJDIR)

help:
	@$(ECHO) "\t make x86/dm6446/dm365/hi3515/hi3518/hi3535"
	@$(ECHO) "\t make DEBUG [optional]"

x86:
	@$(ECHO) "OS=x86" > config.mk
amd64:
	@$(ECHO) "export OS=amd64" > config.mk

arm64:
	@$(ECHO) "export OS=arm64" > config.mk

dm6446:
	@$(ECHO) "OS=dm6446" > config.mk

dm365:
	@$(ECHO) "OS=dm365" > config.mk

rasp3:
	@$(ECHO) "OS=rasp3" > config.mk

hi3515:
	@$(ECHO) "OS=hi3515" > config.mk

hi3518:
	@$(ECHO) "OS=hi3518" > config.mk

hi3535:
	@$(ECHO) "OS=hi3535" > config.mk

rk3308:
	@$(ECHO) "OS=rk3308" > config.mk

mips:
	@$(ECHO) "OS=mips" > config.mk

DEBUG:
	@$(ECHO) "BVDEBUG=yes" >> config.mk


